// CommitNavigationParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/navigation/navigation_params.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


public final class CommitNavigationParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 256;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(256, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.url.internal.mojom.Origin originToCommit;
    public StorageKey storageKey;
    public int sandboxFlags;
    public boolean isOverridingUserAgent;
    public org.chromium.url.mojom.Url[] redirects;
    public org.chromium.network.mojom.UrlResponseHead[] redirectResponse;
    public org.chromium.network.mojom.UrlRequestRedirectInfo[] redirectInfos;
    public String postContentType;
    public org.chromium.url.mojom.Url originalUrl;
    public String originalMethod;
    public boolean canLoadLocalResources;
    public String pageState;
    public int navEntryId;
    public java.util.Map<String, Boolean> subframeUniqueNames;
    public boolean intendedAsNewEntry;
    public int pendingHistoryListOffset;
    public int currentHistoryListOffset;
    public int currentHistoryListLength;
    public boolean wasDiscarded;
    public boolean isViewSource;
    public boolean shouldClearHistoryList;
    public NavigationTiming navigationTiming;
    public int wasActivated;
    public org.chromium.mojo_base.mojom.UnguessableToken navigationToken;
    public PrefetchedSignedExchangeInfo[] prefetchedSignedExchanges;
    public String dataUrlAsString;
    public boolean isBrowserInitiated;
    public org.chromium.url.mojom.Url webBundlePhysicalUrl;
    public org.chromium.url.mojom.Url webBundleClaimedUrl;
    public long documentUkmSourceId;
    public FramePolicy framePolicy;
    public String[] forceEnabledOriginTrials;
    public boolean originAgentCluster;
    public boolean originAgentClusterLeftAsDefault;
    public int[] enabledClientHints;
    public boolean isCrossSiteCrossBrowsingContextGroup;
    public OldPageInfo oldPageInfo;
    public int httpResponseCode;
    public NavigationApiHistoryEntryArrays navigationApiHistoryEntryArrays;
    public org.chromium.url.mojom.Url[] earlyHintsPreloadedResources;
    public org.chromium.url.mojom.Url[] adAuctionComponents;
    public FencedFrameReporting fencedFrameReportingMetadata;
    public org.chromium.mojo_base.mojom.TimeTicks commitSent;
    public boolean anonymous;
    public String srcdocValue;
    public boolean isLoadDataWithBaseUrl;

    private CommitNavigationParams(int version) {
        super(STRUCT_SIZE, version);
        this.sandboxFlags = (int) org.chromium.network.mojom.WebSandboxFlags.ALL;
        this.isOverridingUserAgent = (boolean) false;
        this.canLoadLocalResources = (boolean) false;
        this.navEntryId = (int) 0;
        this.intendedAsNewEntry = (boolean) false;
        this.pendingHistoryListOffset = (int) -1;
        this.currentHistoryListOffset = (int) -1;
        this.currentHistoryListLength = (int) 0;
        this.wasDiscarded = (boolean) false;
        this.isViewSource = (boolean) false;
        this.shouldClearHistoryList = (boolean) false;
        this.wasActivated = (int) WasActivatedOption.UNKNOWN;
        this.isBrowserInitiated = (boolean) false;
        this.originAgentCluster = (boolean) false;
        this.originAgentClusterLeftAsDefault = (boolean) true;
        this.isCrossSiteCrossBrowsingContextGroup = (boolean) false;
        this.httpResponseCode = (int) -1;
        this.anonymous = (boolean) false;
        this.isLoadDataWithBaseUrl = (boolean) false;
    }

    public CommitNavigationParams() {
        this(0);
    }

    public static CommitNavigationParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static CommitNavigationParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static CommitNavigationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        CommitNavigationParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new CommitNavigationParams(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                result.originToCommit = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.storageKey = StorageKey.decode(decoder1);
                }
                {
                    
                result.sandboxFlags = decoder0.readInt(24);
                    org.chromium.network.mojom.WebSandboxFlags.validate(result.sandboxFlags);
                    result.sandboxFlags = org.chromium.network.mojom.WebSandboxFlags.toKnownValue(result.sandboxFlags);
                }
                {
                    
                result.isOverridingUserAgent = decoder0.readBoolean(28, 0);
                }
                {
                    
                result.canLoadLocalResources = decoder0.readBoolean(28, 1);
                }
                {
                    
                result.intendedAsNewEntry = decoder0.readBoolean(28, 2);
                }
                {
                    
                result.wasDiscarded = decoder0.readBoolean(28, 3);
                }
                {
                    
                result.isViewSource = decoder0.readBoolean(28, 4);
                }
                {
                    
                result.shouldClearHistoryList = decoder0.readBoolean(28, 5);
                }
                {
                    
                result.isBrowserInitiated = decoder0.readBoolean(28, 6);
                }
                {
                    
                result.originAgentCluster = decoder0.readBoolean(28, 7);
                }
                {
                    
                result.originAgentClusterLeftAsDefault = decoder0.readBoolean(29, 0);
                }
                {
                    
                result.isCrossSiteCrossBrowsingContextGroup = decoder0.readBoolean(29, 1);
                }
                {
                    
                result.anonymous = decoder0.readBoolean(29, 2);
                }
                {
                    
                result.isLoadDataWithBaseUrl = decoder0.readBoolean(29, 3);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.redirects = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.redirects[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.redirectResponse = new org.chromium.network.mojom.UrlResponseHead[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.redirectResponse[i1] = org.chromium.network.mojom.UrlResponseHead.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.redirectInfos = new org.chromium.network.mojom.UrlRequestRedirectInfo[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.redirectInfos[i1] = org.chromium.network.mojom.UrlRequestRedirectInfo.decode(decoder2);
                    }
                }
                }
                {
                    
                result.postContentType = decoder0.readString(56, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.originalUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                result.originalMethod = decoder0.readString(72, false);
                }
                {
                    
                result.pageState = decoder0.readString(80, false);
                }
                {
                    
                result.navEntryId = decoder0.readInt(88);
                }
                {
                    
                result.pendingHistoryListOffset = decoder0.readInt(92);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    boolean[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        values0 = decoder1.readBooleans(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, keys0.length);
                    }
                    result.subframeUniqueNames = new java.util.HashMap<String, Boolean>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.subframeUniqueNames.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                result.currentHistoryListOffset = decoder0.readInt(104);
                }
                {
                    
                result.currentHistoryListLength = decoder0.readInt(108);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(112, false);
                result.navigationTiming = NavigationTiming.decode(decoder1);
                }
                {
                    
                result.wasActivated = decoder0.readInt(120);
                    WasActivatedOption.validate(result.wasActivated);
                    result.wasActivated = WasActivatedOption.toKnownValue(result.wasActivated);
                }
                {
                    
                result.httpResponseCode = decoder0.readInt(124);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(128, false);
                result.navigationToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(136, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.prefetchedSignedExchanges = new PrefetchedSignedExchangeInfo[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.prefetchedSignedExchanges[i1] = PrefetchedSignedExchangeInfo.decode(decoder2);
                    }
                }
                }
                {
                    
                result.dataUrlAsString = decoder0.readString(144, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(152, false);
                result.webBundlePhysicalUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(160, false);
                result.webBundleClaimedUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                result.documentUkmSourceId = decoder0.readLong(168);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(176, false);
                result.framePolicy = FramePolicy.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(184, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.forceEnabledOriginTrials = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.forceEnabledOriginTrials[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                result.enabledClientHints = decoder0.readInts(192, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                {
                    for (int i1 = 0; i1 < result.enabledClientHints.length; ++i1) {
                        org.chromium.network.mojom.WebClientHintsType.validate(result.enabledClientHints[i1]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(200, true);
                result.oldPageInfo = OldPageInfo.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(208, false);
                result.navigationApiHistoryEntryArrays = NavigationApiHistoryEntryArrays.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(216, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.earlyHintsPreloadedResources = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.earlyHintsPreloadedResources[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(224, true);
                if (decoder1 == null) {
                    result.adAuctionComponents = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(20);
                    result.adAuctionComponents = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.adAuctionComponents[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(232, true);
                result.fencedFrameReportingMetadata = FencedFrameReporting.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(240, false);
                result.commitSent = org.chromium.mojo_base.mojom.TimeTicks.decode(decoder1);
                }
                {
                    
                result.srcdocValue = decoder0.readString(248, false);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.originToCommit, 8, true);
        
        encoder0.encode(this.storageKey, 16, false);
        
        encoder0.encode(this.sandboxFlags, 24);
        
        encoder0.encode(this.isOverridingUserAgent, 28, 0);
        
        encoder0.encode(this.canLoadLocalResources, 28, 1);
        
        encoder0.encode(this.intendedAsNewEntry, 28, 2);
        
        encoder0.encode(this.wasDiscarded, 28, 3);
        
        encoder0.encode(this.isViewSource, 28, 4);
        
        encoder0.encode(this.shouldClearHistoryList, 28, 5);
        
        encoder0.encode(this.isBrowserInitiated, 28, 6);
        
        encoder0.encode(this.originAgentCluster, 28, 7);
        
        encoder0.encode(this.originAgentClusterLeftAsDefault, 29, 0);
        
        encoder0.encode(this.isCrossSiteCrossBrowsingContextGroup, 29, 1);
        
        encoder0.encode(this.anonymous, 29, 2);
        
        encoder0.encode(this.isLoadDataWithBaseUrl, 29, 3);
        
        if (this.redirects == null) {
            encoder0.encodeNullPointer(32, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.redirects.length, 32, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.redirects.length; ++i0) {
                
                encoder1.encode(this.redirects[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.redirectResponse == null) {
            encoder0.encodeNullPointer(40, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.redirectResponse.length, 40, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.redirectResponse.length; ++i0) {
                
                encoder1.encode(this.redirectResponse[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.redirectInfos == null) {
            encoder0.encodeNullPointer(48, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.redirectInfos.length, 48, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.redirectInfos.length; ++i0) {
                
                encoder1.encode(this.redirectInfos[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.postContentType, 56, false);
        
        encoder0.encode(this.originalUrl, 64, false);
        
        encoder0.encode(this.originalMethod, 72, false);
        
        encoder0.encode(this.pageState, 80, false);
        
        encoder0.encode(this.navEntryId, 88);
        
        encoder0.encode(this.pendingHistoryListOffset, 92);
        
        if (this.subframeUniqueNames == null) {
            encoder0.encodeNullPointer(96, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(96);
            int size0 = this.subframeUniqueNames.size();
            String[] keys0 = new String[size0];
            boolean[] values0 = new boolean[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, Boolean> entry0 : this.subframeUniqueNames.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            encoder1.encode(values0, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
        
        encoder0.encode(this.currentHistoryListOffset, 104);
        
        encoder0.encode(this.currentHistoryListLength, 108);
        
        encoder0.encode(this.navigationTiming, 112, false);
        
        encoder0.encode(this.wasActivated, 120);
        
        encoder0.encode(this.httpResponseCode, 124);
        
        encoder0.encode(this.navigationToken, 128, false);
        
        if (this.prefetchedSignedExchanges == null) {
            encoder0.encodeNullPointer(136, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.prefetchedSignedExchanges.length, 136, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.prefetchedSignedExchanges.length; ++i0) {
                
                encoder1.encode(this.prefetchedSignedExchanges[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.dataUrlAsString, 144, false);
        
        encoder0.encode(this.webBundlePhysicalUrl, 152, false);
        
        encoder0.encode(this.webBundleClaimedUrl, 160, false);
        
        encoder0.encode(this.documentUkmSourceId, 168);
        
        encoder0.encode(this.framePolicy, 176, false);
        
        if (this.forceEnabledOriginTrials == null) {
            encoder0.encodeNullPointer(184, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.forceEnabledOriginTrials.length, 184, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.forceEnabledOriginTrials.length; ++i0) {
                
                encoder1.encode(this.forceEnabledOriginTrials[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.enabledClientHints, 192, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.oldPageInfo, 200, true);
        
        encoder0.encode(this.navigationApiHistoryEntryArrays, 208, false);
        
        if (this.earlyHintsPreloadedResources == null) {
            encoder0.encodeNullPointer(216, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.earlyHintsPreloadedResources.length, 216, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.earlyHintsPreloadedResources.length; ++i0) {
                
                encoder1.encode(this.earlyHintsPreloadedResources[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.adAuctionComponents == null) {
            encoder0.encodeNullPointer(224, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.adAuctionComponents.length, 224, 20);
            for (int i0 = 0; i0 < this.adAuctionComponents.length; ++i0) {
                
                encoder1.encode(this.adAuctionComponents[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.fencedFrameReportingMetadata, 232, true);
        
        encoder0.encode(this.commitSent, 240, false);
        
        encoder0.encode(this.srcdocValue, 248, false);
    }
}